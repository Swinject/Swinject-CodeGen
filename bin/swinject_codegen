#!/usr/bin/env ruby
require "erb"
require "Shellwords"
require "optparse"
require_relative "../source/csv_parser"
require_relative "../source/yml_parser"
require_relative "../source/yml_serializer"

@options = {
  MIGRATION: false,
  CONVERT: false,
  INPUT_FILE: nil,
  OUTPUT_FILE: nil
}

@parser = OptionParser.new do |opts|
  opts.banner = "Usage: #{__FILE__} [options]"

  opts.on("-iINPUT", "--input=INPUT", "The file containing the definitions, currently .yml and .csv are supported (separated by semicolon).") do |i|
    @options[:INPUT_FILE] = i
  end

  opts.on("-oOUTPUT", "--output=OUTPUT", "The file to write to. Use STDOUT if not given") do |o|
    @options[:OUTPUT_FILE] = o
  end

  opts.on("-m", "--migration", "Generate migration.sh files to automatically replace existing calls in swift code.") do
    @options[:MIGRATION] = true
  end

  opts.on("-c", "--convert", "Convert the input file into the other format") do
    @options[:CONVERT] = true
  end

  opts.on("-h", "--help", "Prints this help") do
    puts opts
    exit
  end
end

def main
  @parser.parse!

  input_filename = @options[:INPUT_FILE]

  definition_hash = parse_input_file(input_filename)

  if @options[:CONVERT]

    output_filename = @options[:OUTPUT_FILE]

    if input_filename.end_with?("csv")
      YMLSerializer.new.serialize_hash_to_yml(definition_hash, output_filename)
    elsif input_filename.end_with?("yml")
      serialize_hash_to_CSV(definition_hash, output_filename)
    end

    unless output_filename.nil?
      puts "Converted #{input_filename} to #{output_filename}"
    end

    exit 0
  end

  prepare_definitions(definition_hash)

  if @options[:MIGRATION]
    write_migration_file(definition_hash, @options[:OUTPUT_FILE])
  end

  unless @options[:CONVERT] || @options[:MIGRATION]
    write_container_file(definition_hash, @options[:OUTPUT_FILE])
  end
end

def parse_input_file(input_filename)
  if input_filename.end_with?("csv")
    return CSVParser.new.parse_csv(input_filename)
  elsif input_filename.end_with?("yml")
    return YMLParser.new.parse_yml(input_filename)
  else
    puts "unknown input format for file #{input_filename}"
    exit
  end
end

def templates_folder
  "#{File.expand_path(File.dirname(__FILE__))}/../erb"
end

def write_container_file(input_hash, output_filename)
  @content_array = input_hash[:DEFINITIONS]
  @headers = input_hash[:HEADERS]

  code = ERB.new(File.read("#{templates_folder}/container.erb"), nil, "-").result

  if output_filename.nil?
    puts code
  else
    File.open(output_filename, "w") do |file_to_write_to|
      file_to_write_to.puts code
      puts "Generated code in #{output_filename}"
    end
  end
end

def write_migration_file(input_hash, output_filename)
  @migration_array = []

  input_hash[:DEFINITIONS].each do |definition|
    register_function_call_without_last_comma = definition[:register_function_call].reverse.sub(",", "").reverse

    migration_hash = {
      resolve_function_signature_regex: Shellwords.escape(".#{definition[:resolve_function_signature].split('->').first.strip}"),
      resolve_function_call: Shellwords.escape("#{definition[:resolve_function_call]})!"),
      register_function_signature_regex: Shellwords.escape(".#{definition[:register_function_signature].split('(').first}"),
      register_function_call: Shellwords.escape("#{register_function_call_without_last_comma})")
    }

    @migration_array.push migration_hash
  end

  migration_code = ERB.new(File.read("#{templates_folder}/migration.erb"), nil, "-").result

  if output_filename.nil?
    puts migration_code
  else
    migration_file_name = "#{output_filename}.migration.sh"
    File.open(migration_file_name, "w") do |file_to_write_to|
      file_to_write_to.puts migration_code
      puts "Generated migration code in #{migration_file_name}"
    end
  end
end

def prepare_definitions(hash)
  definitions = hash[:DEFINITIONS]

  definitions.each do |definition|
    name = definition[:name]

    has_no_name = (name.nil? || name.empty?)
    argument_hashes = definition[:arguments]

    register_function_signature = "register"
    register_function_signature << definition[:component].delete("<").delete(">").delete(".")
    register_function_signature << "_#{name}" unless has_no_name
    register_function_signature << "(registerClosure: (resolver: ResolverType"
    register_function_signature << ", " unless argument_hashes.nil? || argument_hashes.empty?
    register_function_signature << argument_hashes.map { |a| "#{a[:argument_name]}: #{a[:argument_type]}" }.join(", ") unless argument_hashes.nil? || argument_hashes.empty?
    register_function_signature << ") -> (#{definition[:component]})) -> ServiceEntry<#{definition[:service]}>"

    register_function_call = ".register("
    register_function_call << "#{definition[:service]}.self,"
    register_function_call << " name: \"#{name}\"," unless has_no_name

    resolve_function_signature = "resolve"
    resolve_function_signature << definition[:component].delete("<").delete(">").delete(".")
    resolve_function_signature << "_#{name}" unless has_no_name
    resolve_function_signature << "("
    resolve_function_signature << argument_hashes.each_with_index.map { |a, i| "#{a[:argument_name] + ' ' if i == 0}#{a[:argument_name]}: #{a[:argument_type]}" }.join(", ") unless argument_hashes.nil? || argument_hashes.empty?
    resolve_function_signature << ") -> #{definition[:component]}"

    resolve_function_call = ".resolve("
    resolve_function_call << "#{definition[:service]}.self"
    resolve_function_call << ", name: \"#{name}\"" unless has_no_name

    definition[:resolve_function_signature] = resolve_function_signature
    definition[:resolve_function_call] = resolve_function_call
    definition[:register_function_signature] = register_function_signature
    definition[:register_function_call] = register_function_call
  end
end

def serialize_hash_to_CSV(hash, output_filename)
  @content_array = hash[:DEFINITIONS]
  @headers = hash[:HEADERS]

  code = ERB.new(File.read("#{templates_folder}/csv.erb"), nil, "-").result

  if output_filename.nil?
    puts code
  else
    File.open(output_filename, "w") do |file_to_write_to|
      file_to_write_to.puts code
    end
  end
end

main if __FILE__ == $PROGRAM_NAME

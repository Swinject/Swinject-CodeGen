<%# Ignore the following line in the erb, the erb is not autogenerated and can be modified -%>
// this code is autogenerated, do not modify!

import Swinject
<% @dependencies.uniq.each do |dependency| %>
import  <%= dependency %>
<% end -%>

extension Resolvable {
<% @contentArray.each do |hash| %>
    func <%= hash[:resolveFunctionSignature] %> {
        return self<%= hash[:resolveFunctionCall] %><%= ", argument: #{hash[:arguments][0][:argumentName]}" if !hash[:arguments].nil? && hash[:arguments].count == 1 -%><%= ", arguments: (#{hash[:arguments].map {|a| a[:argumentName]}.join(', ')})" if !hash[:arguments].nil? && hash[:arguments].count > 1 -%>)<%=hash[:baseClass] != hash[:targetClass] ? " as! #{hash[:targetClass]}" : "!"%>
    }
<% end -%>

<% @contentArray.each do |hash| %>
    func <%= hash[:registerFunctionSignature] %> {
        return (self as! Container)<%= hash[:registerFunctionCall] %> factory: registerClosure)
    }
<% end -%>
}

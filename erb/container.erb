<%# Ignore the following line in the erb, the erb is not autogenerated and can be modified -%>
// this code is autogenerated, do not modify!

import Swinject
<% @dependencies.uniq.each do |dependency| %>
import  <%= dependency %>
<% end -%>

extension Resolvable {
<% @content_array.each do |hash| %>
    func <%= hash[:resolve_function_signature.to_s] %> {
        return self<%= hash[:resolve_function_call.to_s] %><%= ", argument: #{hash[:arguments.to_s][0][:argument_name.to_s]}" if !hash[:arguments.to_s].nil? && hash[:arguments.to_s].count == 1 -%><%= ", arguments: (#{hash[:arguments.to_s].map {|a| a[:argument_name.to_s]}.join(', ')})" if !hash[:arguments.to_s].nil? && hash[:arguments.to_s].count > 1 -%>)<%=hash[:service.to_s] != hash[:component.to_s] ? " as! #{hash[:component.to_s]}" : "!"%>
    }
<% end -%>
}

extension Container {
<% @content_array.each do |hash| %>
    func <%= hash[:register_function_signature.to_s] %> {
        return self<%= hash[:register_function_call.to_s] %> factory: registerClosure)
    }
<% end -%>
}
